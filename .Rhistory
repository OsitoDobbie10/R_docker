install.packages("shapefiles")
library(shapefiles)
detach("package:shapefiles", unload = TRUE)
install.packages("rgdal")
install.packages("gdalUtils")
install.packages("MODIStsp")
install.packages("RStoolbox")
install.packages("landsat8")
install.packages("landsat")
install.packages("caret")
primer_valor <- 5
segundo_valor <- 4
fomula <- primer_valor + segundo_valor
print(formula)
print(formula)
fomula <- primer_valor + segundo_valor
formula
formula2 <- sum(primer_valor,segundo_valor)
print(suma)
suma <- sum(valor1,valor2)
valor1 <- 5
valor2<- 4
suma <- sum(valor1,valor2)
print(suma)
library(Matrix)
warner <- c(20, 20, 16, 17, 17, 22, 17, 18, 19)
disney <- c(11, 13, 11, 8, 12, 11, 12, 8, 10)
fox <- c(18, 15, 15, 15, 16, 17, 15, 13, 11)
# creando matriz a partir de vectores
peliculas2 <- matrix(c(warner, disney, fox),
nrow = 9,
ncol = 3)
# agregar nombres de columnas
colnames(peliculas2) <- c('warner', 'disney', 'fox')
# agregar nombres de filas/renglones
rownames(peliculas2) <- c('2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018')
# imprimir el contenido de la matriz
peliculas2
plot(peliculas2)
cantidad <- c(10,20,30,40,50,60)
#otra matriz a partir de vectores
library(Matrix)
cantidad <- c(10,20,30,40,50,60)
precio <- c(30000,35000,45000,55000,65000,125000)
imprimir <- matrix(c(cantidad, precio),
nrow = 6,
ncol = 2)
colnames(imprimir) <- c('cantidad','precio')
rownames(imprimir) <- c('1','2','3','4','5','6')
imprimir
plot(imprimir)
plot(peliculas2)
plot(imprimir)
# siguiente leccion
print("Vamos a aprender mas")
#fcatores en Restudio
library(ggplot2)
tallas <- c("m","M","G","g","S","s")
plot(tallas)
tallas <- c("m","M","G","g","S","s")
#como crear un factor a partir de un vector
tallas_factor <- factor(tallas)
#conteo de los niveles del factor
levels(tallas_factor)
#crear factores recodificados
tallas_recodificadas <- factor(tallas,
levels = c("g","m","M","S"),
labels = c("G","M","M","S"))
plot(tallas_recodificadas)
#ordenar los factores de los vectores
tallas_ordenadas <- factor(tallas,
ordered =  TRUE,
levels = c("g","m","M","S"),
labels = c("G","M","M","S"))
#definir funcion
tallas_ordenadas
#graficar
plot(tallas_ordenadas)
#graficar
plot(tallas_ordenadas)
# vectores sobre peliculas de Shrek
nombre <- c("Shrek", "Shrek 2", "Shrek Tercero", "Shrek: Felices por siempre")
puntuacion <- c(7.9, 7.2, 6.1, 6.3)
posterior_2005 <- c(FALSE, FALSE, TRUE, TRUE)
#como crear un Dataframe en R
nombre_canciones <- c("Stairway to heaven", "Bohemia Rhapsody", "Imagine")
Estreno <- c(1971, 1974, 1975)
posterior_1970 <- (TRUE, TRUE,TRUE)
posterior_1970 <- c(TRUE, TRUE,TRUE)
Data_frame <- data.frame(nombre_canciones,
Estreno,
posterior_1970)
Data_frame
head(Data_frame)
#seleccionar un elemento de DF
Data_frame[1,1]
Data_frame[2,"Nombre_canciones"]
pelicuas_pdf[3,'Puntuacion']
# crear dataframe de vectores
pelicuas_pdf <- data.frame(nombre,
puntuacion,
posterior_2005)
# mostrar dataframe
pelicuas_pdf
Data_frame[2,'Nombre_canciones']
Data_frame['puntuacion',3]
Data_frame[2,3]
#seleccionar un elemento de DF
Data_frame[1,2]
Data_frame <- data.frame(nombre_canciones,
Estreno,
posterior_1970)
Data_frame
Data_frame[3,2]
Data_frame$nombre_canciones
plot(Data_frame$Estreno)
file.choose()
excel_sheets(ruta_excel1)
excel_sheets(ruta_excel)
leer <- read.csv(ruta_excel1)
excel_sheets(ruta_excel)
#importar caso ideal de datos de la tabla excel a R
caso_ideal <- read_excel(ruta_excel)
library(tidyverse)
#cargar datos
data("Orange")
#cargar datos
data("Orange")
head(Orange)
plot(Orange$age , Orange$circumference)
#problema pregunta
#cuantos medira la circuferencia en promedio
#de un arbol de naranajas a los 800 dias de plantarlo
#Tomar los datos y graficar
Orange
ggplot(aes(x = age ,
y = circumferencia))
ggplot(aes( x = age ,
y = circumferencia))
geom_point() #agregar una capa de puntos a la grafica
plot(Orange$age , Orange$circumference)
library(ggplot2)
library(tidyverse)
#problema pregunta
#cuantos medira la circuferencia en promedio
#de un arbol de naranajas a los 800 dias de plantarlo
#Tomar los datos y graficar
Orange
ggplot(aes( x = age ,
y = circumference))
plot(Orange$age , Orange$circumference)
ggplot(aes( x = age ,
y = circumference)) + geom_point() #agregar una capa de puntos a la grafica
#problema pregunta
#cuantos medira la circuferencia en promedio
#de un arbol de naranajas a los 800 dias de plantarlo
#Tomar los datos y graficar
Orange %>%
ggplot(aes( x = age ,
y = circumference)) + geom_point() #agregar una capa de puntos a la grafica
#problema pregunta
#cuantos medira la circuferencia en promedio
#de un arbol de naranajas a los 800 dias de plantarlo
#Tomar los datos y graficar
Orange %>% #usar para generar grafica
ggplot(aes( x = age ,
y = circumference)) + geom_point() +
geom_abline(intercept = 0.1 , #modelo de regresion valor
slope = 1.0)   #modelo de regresion
#problema pregunta
#cuantos medira la circuferencia en promedio
#de un arbol de naranajas a los 800 dias de plantarlo
#Tomar los datos y graficar
Orange %>% #usar para generar grafica
ggplot(aes( x = age ,
y = circumference)) + geom_point() +
geom_abline(intercept = 10 , #modelo de regresion valor
slope = 0.1)   #modelo de regresion
#mejor ajuste de los datos
#funcion lm nos ayuda a encontrar los mejores valores para los datos
lm(circumference - age, data = Orange)
#mejor ajuste de los datos
#funcion lm nos ayuda a encontrar los mejores valores para los datos
lm(circumference - age, data = Orange)
#mejor ajuste de los datos
#funcion lm nos ayuda a encontrar los mejores valores para los datos
lm(circumference ~ age, data = Orange)
#problema pregunta
#cuantos medira la circuferencia en promedio
#de un arbol de naranajas a los 800 dias de plantarlo
#Tomar los datos y graficar
Orange %>% #usar para generar grafica
ggplot(aes( x = age ,
y = circumference)) + geom_point() +
geom_abline(intercept =  17.3997 , #modelo de regresion valor
slope = 0.1068)   #modelo de regresion
#problema pregunta
#cuantos medira la circuferencia en promedio
#de un arbol de naranajas a los 800 dias de plantarlo
#Tomar los datos y graficar
Orange %>% #usar para generar grafica
ggplot(aes( x = age ,
y = circumference)) + geom_point() +
geom_abline(intercept =  17.3997 , #modelo de regresion valor
slope = 0.1068) +
geom_vline(xintercept = 800 ,
col = 'red')
medida <- 0.1068 * dias + 17.3997
medida <- 0.1068 *dias + 17.3997
variable <- 800
medida <- 0.1068 * variable + 17.3997
medida <- 0.1068 * variable + 17.3997
medida
install.packages("Rtools")
install.packages("RStoolbox")
utils:::menuInstallPkgs()
q()
install.packages("C:/Users/Usuario/Desktop/stars_0.4-3.zip", repos = NULL, type = "win.binary")
library(stars)
library(sf)
library(stars)
library(sf)
library(sf)
#salida del archivo raster y shp
plot(Mask_tx_pp , main = "Corte proceso extraccion de un raster")
plot(capa_vectorial, add=TRUE)
502/3547
3760/2456780
0.001530459*1000
tota_de_edad <- 3760
total_de_poblacion <- 2456780
tasa_mortalidad <- tota_de_edad/total_de_poblacion*1000
tasa_mortalidad
nacidos_vivos <- tasa_bruta_natalidad*total_de_poblacion/1000
nacidos_vivos
tota_de_edad <- 3760
total_de_poblacion <- 2456780
tasa_mortalidad <- tota_de_edad/total_de_poblacion*1000
poblacacion_area_rural <- 24
tasa_bruta_natalidad <- 1.32
menores_de_edad <- 3760
mujer_edad_fertil <- 35700
menores_de_ano <- 320
nacidos_vivos <- tasa_bruta_natalidad*total_de_poblacion/1000
nacidos_vivos
tasa_mortalidad_infantil <- menores_de_edad/nacidos_vivos* 1000
tasa_mortalidad_infantil
tasa_mortalidad_infantil <- menores_de_edad/nacidos_vivos
tasa_mortalidad_infantil
nacidos_vivos <- tasa_bruta_natalidad*total_de_poblacion/1000
nacidos_vivos
nacidos_vivos <- tasa_bruta_natalidad*total_de_poblacion/1000
nacidos_vivos
nacidos_vivos <- tasa_bruta_natalidad*total_de_poblacion*1000
nacidos_vivos
nacidos_vivos <- tasa_bruta_natalidad*total_de_poblacion/1000
nacidos_vivos
tasa_mortalidad_infantil <- menores_de_edad/nacidos_vivos
tasa_mortalidad_infantil
nacidos_vivos
tasa_mortalidad_infantil <- menores_de_edad/nacidos_vivos
tasa_mortalidad_infantil
tasa_mortalidad_infantil <- menores_de_edad/nacidos_vivos*1000
tasa_mortalidad_infantil
datos <- c("87","109","80","96","95","90","92","96","98","101",
"91","78","98","94","107","81","96")
sum(datos)
datos <- c(87,109,80,96,95,90,92,96,98,101,
91,78,98,94,107,81,96)
sum(datos)
mean(datos)
datos <- c(87,109,81,80,96,95,90,92,96,98,101,
91,78,112,94,98,94,107,81,96)
mean(datos)
range(datos)
var(datos)
sd(datos)
mean(datos)
sd(datos)
d <- sd(datos)/mean(datos)
d
x <- c(8,8,12,12,16,16,20,20,24,24)
y <- c(8,6,6,10,8,14,14,12,16,12)
datos <- Data_frame(x,y)
datos2 <- Data_frame(x,y)
x <- c(8,8,12,12,16,16,20,20,24,24)
y <- c(8,6,6,10,8,14,14,12,16,12)
datos2 <- Data_frame(x,y)
D_t <- Data_frame(x,y)
D_t <- data.frame(x,y)
D_t
lm(x  ~ y, data = D_t)
library(tidyverse)
library(ggplot)
x <- c(8,8,12,12,16,16,20,20,24,24)
y <- c(8,6,6,10,8,14,14,12,16,12)
D_t <- data.frame(x,y)
library(tidyverse)
library(ggplot)
lm(circumference ~ age, data = Orange
x <- c(8,8,12,12,16,16,20,20,24,24)
library(tidyverse)
library(ggplot)
x <- c(8,8,12,12,16,16,20,20,24,24)
y <- c(8,6,6,10,8,14,14,12,16,12)
D_t <- data.frame(x,y)
D_t
lm(x  ~ y, data = D_t)
ggplot(aes(x = x ,
y = y)) + geom_point() + geom_abline(intercept = 1.665,slope = 1.352)
ggplot(aes(x = x ,
y = y)) + geom_point() + geom_abline(intercept = 1.665,slope = 1.352)
lm(x  ~ y, data = D_t)
ggplot(aes(x = x ,y = y)) + geom_point() + geom_abline(intercept = 1.665,slope = 1.352)
#webinar par el desarollo
#como reproyecta r un shp y raster en R
library(raster)
library(raster)
library(sf)
library(rgal)
library(raster)
library(rgdal)
library(maptools)
library(ggplot2)
library(rgdal)
library(sp)
library(sf)
library(rgeos)
install.packages(c("backports", "broom", "callr", "data.table", "dplyr", "fs", "gdalUtilities", "geojsonsf", "glue", "gower", "htmltools", "httr", "isoband", "jsonlite", "knitr", "leafem", "mapdeck", "maptools", "mapview", "MODIStsp", "openssl", "openxlsx", "pillar", "pkgbuild", "processx", "ps", "quantreg", "R.methodsS3", "R.oo", "R.utils", "Rcpp", "RcppArmadillo", "recipes", "rgdal", "rJava", "rlang", "rmarkdown", "rvest", "sf", "shiny", "spatialwidget", "SQUAREM", "stringi", "svglite", "sys", "systemfonts", "tibble", "tidyr", "tinytex", "tmap", "vctrs", "xfun", "xlsx", "XML", "xts"))
install.packages("C:/Users/Usuario/Downloads/velox_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Usuario/Downloads/velox_0.2.0.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Usuario/Downloads/velox-master.zip", repos = NULL, type = "win.binary")
rm(list = ls())
library(gstat)
library(raster)
library(sf)
library(sp)
library(rgdal)
library(tidyverse)
library(rworldxtra)
library(ggplot2)
library(stars)
library(leaflet)
library(sp)
library(sf)
#Base de datos libreria SP
data("meuse") #llamar la base de datos
#Transformar a sf
Meuse <- st_as_sf(meuse,coords = c(1:2), crs = "+int=epsg:28992")#convertir nuestra data a un datframe
Meuse
view(Meuse)
#covertir nuestro datframe en un spatialpointDataFrame dandole las coordenadas de nuestros campos x,y
#transformar a SpatialPointDataFrame
coordinates(meuse)<- ~x + y
proj4string(meuse) <- CRS("+init=epsg:28992")
meuse
#graficar un dato vectorial
ggplot() + geom_sf(data = Meuse, aes(color = zinc)) + theme_bw()
ggplot() + geom_sf(data = Meuse,mapping = aes(color = zinc)) + theme_bw() + labs(title = "\nGrafico de distribucion espacial\n cantidad de Zinc") + scale_color_viridis_c()
#generar un variograma
#es una medida de que tanto varia o variaciones hay entre la zona de puntos.
#Generar un varigrama de logaritmo para tener como resultado valores postivos y no negativos en nuestro analisis
Z_vgm_null <- variogram(log(zinc) ~ 1, meuse) #crear semivariograma
Z_vgm_null
#Modelo Nulo semiovarigrama
Z_vgm_null <- variogram(log(zinc) ~ 1, meuse) %>% mutate(Modelo="Nulo")
Z_vgm_null
plot(Z_vgm_null)
# Modelo Espacial agregando al modelo la variable de coordenadas.
Z_vgm_Spat <- variogram(log(zinc) ~ x + y, meuse) %>% mutate(Modelo = "Espacial")
plot(Z_vgm_Spat)
plot(Z_vgm_null)
plot(Z_vgm_Spat)
# Modelo distancia agregamos al modelo la variable de distancias a otro elemento
#permite explicar nuestro semivariograma teniendo en cuenta nuestro factor de coordenadas dando  un valor mas corto en la curva
Z_vgm_Dist <- variogram(log(zinc) ~ dist, meuse,cutoff=1000,width=10) %>% mutate(Modelo = "distancia")   #cutoff da valores mas grandes de valor width da un anchura q da valores o mayor distribucion de puntos
Z_vgm_Dist
Z_vgm_Dist <- variogram(log(zinc) ~ dist, meuse) %>% mutate(Modelo = "distancia") #variograma normal
Z_vgm_Dist
plot(Z_vgm_Dist)
plot(Z_vgm_Spat)
## Modelo sqrt Dist
Z_vgm_Dist_sq <- variogram(log(zinc) ~ sqrt(dist), meuse) %>% mutate(Modelo = "sqrt(dist)")
plot(Z_vgm_Dist_sq)
#unir en un solo dato las variables creados
Z_vgm <- list(Z_vgm_Dist, Z_vgm_null, Z_vgm_Spat, Z_vgm_Dist_sq) %>% reduce(bind_rows)
Z_vgm
plot(Z_vgm)
x <- ggplot(data = Z_vgm,mapping = aes(x=dist,y=gamma)) + geom_point(aes(color = Modelo)) + labs(title = "\nGrafico de distribuciones \n Semiovariograma")
x
#fit.variogram nos permite encontrar el valor de distancia y gamma donde llega el valor mas alto de nuestra asintota
Abn_fit_Spat <- fit.variogram(Z_vgm_Spat, model = vgm(1, "Sph", 700, 1)) #dar un modelo un que es un modelo esferico 1=nug que es donde comienza el modelo
Abn_fit_Spat
#visualizar los variogramas
Abn_fit_null <- fit.variogram(Z_vgm_null, model = vgm(1, "Sph",  700, 1))
Abn_fit_Spat <- fit.variogram(Z_vgm_Spat, model = vgm(1, "Sph",  700, 1))
Abn_fit_Dist <- fit.variogram(Z_vgm_Dist, model = vgm(1, "Sph",  700, 1))
Abn_fit_Dist_sq <- fit.variogram(Z_vgm_Dist_sq, model = vgm(1,"Sph", 700, 1))
Abn_list     <- list(Abn_fit_null,Abn_fit_Spat,Abn_fit_Dist,Abn_fit_Dist_sq) %>% reduce(bind_rows) #reduce convierte una lista en un dataframe
Abn_list
#generar interpolacion
data(meuse.grid)
Meuse_Grid <- st_as_sf(meuse.grid, coords = c(1, 2), crs = "+init=epsg:28992")
coordinates(meuse.grid) = ~x + y
proj4string(meuse.grid) <- CRS("+init=epsg:28992")
ggplot() + geom_sf(data = Meuse_Grid, aes(color = dist)) + scale_color_viridis_c()
#prediccion de Kriging
Spat_pred <- krige(log(zinc) ~ x + y, meuse, meuse.grid, model = Abn_fit_Spat) %>% st_as_sf()
Spat_pred
#prediccion de Kriging
Spat_pred <- krige(log(zinc) ~ x + y, meuse, meuse.grid, model = Abn_fit_Spat) %>% st_as_sf()
view(Spat_pred)
#rasterizar el raster de acuerdo a un valor
k_raster <- st_rasterize(Spat_pred2["var1.pred"],dx=30,dy=30)
#prediccion de Kriging
Spat_pred <- krige(log(zinc) ~ x + y, meuse, meuse.grid, model = Abn_fit_Spat) %>% st_as_sf()
Spat_pred2 <- krige(log(zinc)~ x + y, meuse,meuse.grid,model =Abn_fit_Spat) %>% st_as_sf()
#rasterizar el raster de acuerdo a un valor
k_raster <- st_rasterize(Spat_pred2["var1.pred"],dx=30,dy=30)
plot(k_raster,col=ifelse(k_raster$var1.pred>5,"yellow","green"))
plot(Spat_pred2)
plot(k_raster)
library(tidyverse)
library(ggmap)
install.packages("ggmap")
library(ggmap)
library(tibble)
#registrarse a google
register_google(key = "AIzaSyBTuFxgG1NCHqqR_fxnFfs_5MwJ5xYJP9k")
#Ejemplo
vista <- geocode("Tegucigalpa, Honduras", zoom = 15)
#Ejemplo
vista <- geocode("Metal Gym, Honduras", zoom = 15)
#registrarse a google
register_google(key = "AIzaSyBTuFxgG1NCHqqR_fxnFfs_5MwJ5xYJP9k")
#Ejemplo
vista <- geocode("Metal Gym, Honduras", zoom = 15)
#registrarse a google
register_google(key = "AIzaSyBTuFxgG1NCHqqR_fxnFfs_5MwJ5xYJP9k")
#Ejemplo
vista <- geocode("Metal Gym, Honduras", zoom = 15)
View(Abn_fit_Dist)
View(k_raster)
library(sf)
library(raster)
?writeRaster
library(rgee)
library(sf)
library(raster)
library(dplyr)
library(rgdal)
library(leaflet)
ee_Initialize()
ee_Initialize()
library(rgee)
library(sf)
library(raster)
library(dplyr)
library(rgdal)
library(leaflet)
library(leaflet.extras)
library(rgee)
library(mapview)
library(tmap)
library(tmaptools)
library(mapview)
library(tidyverse)
setwd("C:/Users/Usuario/Desktop/Mapas_R/")
dir <- "C:/Users/Usuario/Desktop/Mapas_R/"
list_shp <- list.files(dir,pattern = ".shp")
colonia <- read_sf("amapolar_wgs84.shp")
names <- colonia$Uso_Suelo %>% unique()
n1 <- names[1]
n2 <- names[2]
n3 <- names[3]
names1 <- colonia[colonia$Uso_Suelo=="Vivienda",] %>% unique()
Colores <- c("#a6cee3", "#1f78b4", "#b2df8a")
color_html <- colorFactor(Colores,domain=names)
color1 <- c("#a6cee3")
color2 <- c("#1f78b4")
color3 <- c("#b2df8a")
color1_html_1 <- colorFactor(color1,domain=n1)
color2_html_2 <- colorFactor(color2,domain=n2)
color3_html_3 <- colorFactor(color3,domain=n3)
#vistas filtradas
filtro <- colonia %>% dplyr::filter(Uso_Suelo=="Vivienda") %>% as_Spatial()
filtro2 <- colonia %>% dplyr::filter(Uso_Suelo=="Baldio") %>% as_Spatial()
filtro3 <- colonia %>% dplyr::filter(Uso_Suelo== "Urbanizacion")  %>% as_Spatial()
#mapa vista
map1 <- leaflet() %>% addTiles() %>% addPolygons(data = filtro,
fillColor = topo.colors(1,alpha = NULL),
weight = 0.5,
label =  ~Uso_Suelo,
popup = ~Area,
group = "Viviendas")
map2 <- map1 %>% addPolygons(data = filtro2,
fillColor = topo.colors(2,alpha = NULL),
weight = 0.5,
label =  ~Uso_Suelo,
popup = ~Area,
group = "Baldio")
map3 <- map2 %>% addPolygons(data = filtro3,
fillColor = topo.colors(4,alpha = NULL),
weight = 0.5,
label =  ~Uso_Suelo,
popup = ~Area,
group = "Urbanizacion")
map_final <- map3 %>% addDrawToolbar(targetGroup = "tablas",
editOptions = editToolbarOptions(selectedPathOptions = selectedPathOptions())) %>%
addLayersControl(overlayGroups = c("Viviendas","Baldio","Urbanizacion","tablas"),
options = layersControlOptions(collapsed = TRUE))
map_final
